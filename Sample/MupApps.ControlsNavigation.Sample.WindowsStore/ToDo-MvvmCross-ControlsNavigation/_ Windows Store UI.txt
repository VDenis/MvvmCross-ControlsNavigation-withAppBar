The steps to get this plugin on Store UI working are:

1. Override the CreateViewPresenter method on your Setup.cs file:

		protected override IMvxStoreViewPresenter CreateViewPresenter(Frame rootFrame)
		{
			var viewPresenter = base.CreateViewPresenter(rootFrame);
			return new MvxStoreControlPresenter(viewPresenter);
		}

2. Add a new UserControl to the Controls folder and Inherit from MvxStoreControl, 
	with the same name of the ViewModel but ending in Control (Ex: SecondViewModel -> SecondControl)

		<controls:MvxStoreControl xmlns:controls="using:MupApps.MvvmCross.Plugins.ControlsNavigation.WindowsStore"


		public sealed partial class YourControl : MvxStoreControl


3. Add the user control to one of your Views that is already binded with a ViewModel (Ex: FirstView). 
	On your view xaml:

		xmlns:controls="using:YourNamespace.Controls"

		...

		<controls:SecondControl />

	The control will be hidden until ShowViewModel has been called. 
	You could change that behaviour setting the property EmptyControlBehaviour (None, Hidden, Disabled)

4. Call the ShowViewModel method from the container view's ViewModel and the control will do its job!

 You can check a working sample here:
 https://github.com/ChristianRuiz/MvvmCross-ControlsNavigation/tree/v1/MupApps.MvvmCross.Plugins.ControlsNavigation/Sample/MupApps.ControlsNavigation.Sample.WindowsStore
